/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.gym.form;

import com.gym.dao.ThongKeDAO_Procedure;
import com.gym.dao.ChiTietDungCuDAO;
import com.gym.dao.ChiTietGoiTapDAO;
import com.gym.dao.ChiTietThuePTDAO;
import com.gym.dao.DonHangDAO;
import com.gym.dao.DungCuDAO;
import com.gym.dao.GoiTapDAO;
import com.gym.dao.KhachHangDAO;
import com.gym.util.MsgBox;
import com.gym.dao.NhanVienDAO;
import com.gym.entity.ChiTietDungCu;
import com.gym.entity.ChiTietGoiTap;
import com.gym.entity.ChiTietThuePT;
import com.gym.entity.DonHang;
import com.gym.entity.DungCu;
import com.gym.entity.GoiTap;
import com.gym.entity.KhachHang;
import com.gym.entity.NhanVien;
import com.gym.util.Auth;
import com.gym.util.XDate;
import com.gym.util.XImage;
import com.itextpdf.io.font.PdfEncodings;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.geom.PageSize;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.borders.Border;
import com.itextpdf.layout.borders.DottedBorder;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Div;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.property.TextAlignment;
import com.itextpdf.pdfa.PdfADocument;
import static java.awt.image.ImageObserver.ABORT;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.net.URL;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.log4j.BasicConfigurator;
import org.apache.log4j.spi.Configurator;

/**
 *
 * @author RAVEN
 */
public class QuanLyDonHang extends javax.swing.JPanel {

    /**
     * Creates new form Form_1
     */
    public QuanLyDonHang() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMaDH = new javax.swing.JTextField();
        txtNgayTao = new javax.swing.JTextField();
        txtTongTien = new javax.swing.JTextField();
        txtMaKH = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDonHang = new javax.swing.JTable();
        btnDoi = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        txtTienNhan = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtTienThua = new javax.swing.JTextField();
        btnThanhToan = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        rdoCho = new javax.swing.JRadioButton();
        rdoDaThanhToan = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnlMuaGoiTap = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblGoiTap = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblChiTietGoiTap = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtSearchGT = new javax.swing.JTextField();
        pnlThuePT = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblChiTietThuePT = new javax.swing.JTable();
        jLabel23 = new javax.swing.JLabel();
        txtSearchNV = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblNhanVien = new javax.swing.JTable();
        pnlMuaDungCu = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        txtSearchDC = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblDungCu = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblChiTietDungCu = new javax.swing.JTable();
        jLabel22 = new javax.swing.JLabel();
        btnFirst = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        btnHuyDon = new javax.swing.JButton();
        btnXuatHoaDon = new javax.swing.JButton();
        btnTaoDon = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(204, 204, 255), new java.awt.Color(153, 153, 255)), "Thông tin đơn hàng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Mã đơn hàng:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Ngày tạo:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Tổng tiền:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Mã khách hàng:");

        txtMaDH.setEditable(false);
        txtMaDH.setText("0");
        txtMaDH.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(255, 153, 255), new java.awt.Color(153, 153, 255)));
        txtMaDH.setEnabled(false);

        txtNgayTao.setEditable(false);
        txtNgayTao.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 153, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(255, 153, 255), new java.awt.Color(153, 153, 255)));
        txtNgayTao.setEnabled(false);

        txtTongTien.setEditable(false);
        txtTongTien.setText("0");
        txtTongTien.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 153, 255), new java.awt.Color(255, 153, 255)));
        txtTongTien.setEnabled(false);

        txtMaKH.setEditable(false);
        txtMaKH.setText("KH0");
        txtMaKH.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 153, 255), new java.awt.Color(255, 153, 255)));
        txtMaKH.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                txtMaKHPropertyChange(evt);
            }
        });
        txtMaKH.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMaKHKeyTyped(evt);
            }
        });

        tblDonHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "MÃ ĐH", "MÃ NV", "MÃ KH", "NGÀY TẠO", "TRẠNG THÁI", "TỔNG TIỀN", "TIỀN NHẬN", "TIỀN THỪA"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDonHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDonHangMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDonHang);

        btnDoi.setText("ĐỔI");
        btnDoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoiActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setText("Tiền nhận:");

        txtTienNhan.setText("0");
        txtTienNhan.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 153, 255), new java.awt.Color(255, 153, 255)));
        txtTienNhan.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTienNhanKeyReleased(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setText("Tiền thừa:");

        txtTienThua.setEditable(false);
        txtTienThua.setText("0");
        txtTienThua.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(153, 204, 255), new java.awt.Color(153, 255, 255), new java.awt.Color(153, 153, 255), new java.awt.Color(255, 153, 255)));
        txtTienThua.setEnabled(false);

        btnThanhToan.setText("THANH TOÁN");
        btnThanhToan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThanhToanActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setText("Trạng thái:");

        buttonGroup1.add(rdoCho);
        rdoCho.setText("Chờ");

        buttonGroup1.add(rdoDaThanhToan);
        rdoDaThanhToan.setText("Đã thanh toán");

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gym/icon/search.png"))); // NOI18N

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(txtSearch))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNgayTao, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTienNhan, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMaDH, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rdoCho)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rdoDaThanhToan))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTienThua, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnThanhToan)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnDoi, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtMaDH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtMaKH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDoi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNgayTao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTongTien)
                            .addComponent(jLabel5))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTienNhan)
                            .addComponent(jLabel8))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTienThua)
                            .addComponent(jLabel9))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(rdoCho)
                            .addComponent(rdoDaThanhToan))
                        .addGap(11, 11, 11)
                        .addComponent(btnThanhToan))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 1060, 310));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 153, 255), new java.awt.Color(153, 153, 255), new java.awt.Color(102, 204, 255), new java.awt.Color(204, 204, 255)));

        tblGoiTap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MÃ GT", "TÊN GÓI", "GIÁ", "THỜI HẠN", "MÔ TẢ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblGoiTap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblGoiTapMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblGoiTap);

        tblChiTietGoiTap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "MÃ GT", "MÃ ĐH", "SỐ LƯỢNG", "NGÀY ĐK", "NGÀY KT", "GIÁ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTietGoiTap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietGoiTapMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblChiTietGoiTap);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("DANH SÁCH SẢN PHẨM");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setText("CHI TIẾT HÓA ĐƠN");

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gym/icon/search.png"))); // NOI18N

        txtSearchGT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchGTKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlMuaGoiTapLayout = new javax.swing.GroupLayout(pnlMuaGoiTap);
        pnlMuaGoiTap.setLayout(pnlMuaGoiTapLayout);
        pnlMuaGoiTapLayout.setHorizontalGroup(
            pnlMuaGoiTapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMuaGoiTapLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlMuaGoiTapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addGroup(pnlMuaGoiTapLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchGT))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(pnlMuaGoiTapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );
        pnlMuaGoiTapLayout.setVerticalGroup(
            pnlMuaGoiTapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMuaGoiTapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMuaGoiTapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMuaGoiTapLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMuaGoiTapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchGT, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMuaGoiTapLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mua gói tập", pnlMuaGoiTap);

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel15.setText("DANH SÁCH HUẤN LUYỆN VIÊN");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel17.setText("CHI TIẾT HÓA ĐƠN");

        tblChiTietThuePT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "MÃ NV", "MÃ ĐH", "SỐ BUỔI", "NGÀYTHUÊ", "NGÀY KT", "GIÁ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTietThuePT.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietThuePTMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblChiTietThuePT);

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gym/icon/search.png"))); // NOI18N

        txtSearchNV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchNVKeyReleased(evt);
            }
        });

        tblNhanVien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MÃ NV", "TÊN NV", "GIÁ", "THỜI HẠN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhanVien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNhanVienMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblNhanVien);

        javax.swing.GroupLayout pnlThuePTLayout = new javax.swing.GroupLayout(pnlThuePT);
        pnlThuePT.setLayout(pnlThuePTLayout);
        pnlThuePTLayout.setHorizontalGroup(
            pnlThuePTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlThuePTLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(pnlThuePTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15)
                    .addGroup(pnlThuePTLayout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchNV))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(46, 46, 46)
                .addGroup(pnlThuePTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 575, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        pnlThuePTLayout.setVerticalGroup(
            pnlThuePTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlThuePTLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlThuePTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlThuePTLayout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlThuePTLayout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlThuePTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchNV, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addGap(32, 32, 32))
        );

        jTabbedPane1.addTab("Thuê huấn luyện viên", pnlThuePT);

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel19.setText("DANH SÁCH SẢN PHẨM");

        txtSearchDC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchDCKeyReleased(evt);
            }
        });

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/gym/icon/search.png"))); // NOI18N

        tblDungCu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MÃ DC", "TÊN DC", "GIÁ", "SỐ LƯỢNG", "HÌNH"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Double.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDungCu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDungCuMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tblDungCu);

        tblChiTietDungCu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ DC", "MÃ ĐH", "SỐ LƯỢNG", "GIÁ"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblChiTietDungCu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblChiTietDungCuMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tblChiTietDungCu);

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel22.setText("CHI TIẾT HÓA ĐƠN");

        javax.swing.GroupLayout pnlMuaDungCuLayout = new javax.swing.GroupLayout(pnlMuaDungCu);
        pnlMuaDungCu.setLayout(pnlMuaDungCuLayout);
        pnlMuaDungCuLayout.setHorizontalGroup(
            pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMuaDungCuLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19)
                    .addGroup(pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(pnlMuaDungCuLayout.createSequentialGroup()
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSearchDC, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel22)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 534, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
        );
        pnlMuaDungCuLayout.setVerticalGroup(
            pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMuaDungCuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMuaDungCuLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(pnlMuaDungCuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSearchDC, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlMuaDungCuLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Mua dụng cụ", pnlMuaDungCu);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 460, 1060, 290));

        btnFirst.setText("|<");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jPanel1.add(btnFirst, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 420, -1, -1));

        btnPrev.setText("<<");
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });
        jPanel1.add(btnPrev, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 420, -1, -1));

        btnNext.setText(">>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel1.add(btnNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 420, -1, -1));

        btnLast.setText(">|");
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel1.add(btnLast, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 420, -1, -1));

        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoa, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 390, 144, -1));

        btnReset.setText("Làm mới");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });
        jPanel1.add(btnReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 390, 144, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 102, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("QUẢN LÝ ĐƠN HÀNG");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 20, 330, 50));

        btnHuyDon.setText("Hủy đơn");
        btnHuyDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyDonActionPerformed(evt);
            }
        });
        jPanel1.add(btnHuyDon, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 390, 130, -1));

        btnXuatHoaDon.setText("Xuất hóa đơn");
        btnXuatHoaDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXuatHoaDonActionPerformed(evt);
            }
        });
        jPanel1.add(btnXuatHoaDon, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 390, 140, -1));

        btnTaoDon.setText("Tạo đơn");
        btnTaoDon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTaoDonActionPerformed(evt);
            }
        });
        jPanel1.add(btnTaoDon, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 130, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1103, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        clearForm();
        tblDonHang.clearSelection();
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnDoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoiActionPerformed
        doiKH();
    }//GEN-LAST:event_btnDoiActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        delete();
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevActionPerformed
        prev();
    }//GEN-LAST:event_btnPrevActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        timKiemDH();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void btnHuyDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyDonActionPerformed
        cancelDH();
        btnDoi.setEnabled(true);
    }//GEN-LAST:event_btnHuyDonActionPerformed

    private void tblDonHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDonHangMouseClicked
        if (evt.getClickCount() == 2) {
            this.rowDH = tblDonHang.getSelectedRow();
            this.edit();
            this.fillChiTietGoiTap();
            this.fillChiTietDungCu();
            this.fillChiTietThuePT();
        }
    }//GEN-LAST:event_tblDonHangMouseClicked

    private void txtMaKHPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_txtMaKHPropertyChange

    }//GEN-LAST:event_txtMaKHPropertyChange

    private void txtMaKHKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaKHKeyTyped

    }//GEN-LAST:event_txtMaKHKeyTyped

    private void txtSearchGTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchGTKeyReleased
        timKiemGT();
    }//GEN-LAST:event_txtSearchGTKeyReleased

    private void btnThanhToanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThanhToanActionPerformed
        thanhToan();
        updateStatus();
    }//GEN-LAST:event_btnThanhToanActionPerformed

    private void txtTienNhanKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTienNhanKeyReleased
        tinhTien();
    }//GEN-LAST:event_txtTienNhanKeyReleased

    private void txtSearchDCKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchDCKeyReleased
        timKiemDC();
    }//GEN-LAST:event_txtSearchDCKeyReleased

    private void tblDungCuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDungCuMouseClicked
        if (evt.getClickCount() == 2) {
            themDC();
        }
    }//GEN-LAST:event_tblDungCuMouseClicked

    private void tblChiTietDungCuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietDungCuMouseClicked
        if (evt.getClickCount() == 2) {
            xoaDC();
        }
    }//GEN-LAST:event_tblChiTietDungCuMouseClicked

    private void tblGoiTapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblGoiTapMouseClicked
        if (evt.getClickCount() == 2) {
            themGT();
        }
    }//GEN-LAST:event_tblGoiTapMouseClicked

    private void tblChiTietGoiTapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietGoiTapMouseClicked
        if (evt.getClickCount() == 2) {
            xoaGT();
        }
        if (evt.getClickCount() == 1) {
            edit();
        }
    }//GEN-LAST:event_tblChiTietGoiTapMouseClicked

    private void tblChiTietThuePTMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblChiTietThuePTMouseClicked
        if (evt.getClickCount() == 2) {
            xoaTPT();
        }
    }//GEN-LAST:event_tblChiTietThuePTMouseClicked

    private void btnXuatHoaDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXuatHoaDonActionPerformed
        xuatHoaDon();
    }//GEN-LAST:event_btnXuatHoaDonActionPerformed

    private void btnTaoDonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTaoDonActionPerformed
        createDH();
        txtMaKH.setText("KH0");
        updateDH();
        btnDoi.setEnabled(true);
    }//GEN-LAST:event_btnTaoDonActionPerformed

    private void tblNhanVienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNhanVienMouseClicked
        if (evt.getClickCount() == 2) {
            thuePT();
        }
    }//GEN-LAST:event_tblNhanVienMouseClicked

    private void txtSearchNVKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchNVKeyReleased
        timKiemNV();
    }//GEN-LAST:event_txtSearchNVKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDoi;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnHuyDon;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnTaoDon;
    private javax.swing.JButton btnThanhToan;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXuatHoaDon;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel pnlMuaDungCu;
    private javax.swing.JPanel pnlMuaGoiTap;
    private javax.swing.JPanel pnlThuePT;
    private javax.swing.JRadioButton rdoCho;
    private javax.swing.JRadioButton rdoDaThanhToan;
    private javax.swing.JTable tblChiTietDungCu;
    private javax.swing.JTable tblChiTietGoiTap;
    private javax.swing.JTable tblChiTietThuePT;
    private javax.swing.JTable tblDonHang;
    private javax.swing.JTable tblDungCu;
    private javax.swing.JTable tblGoiTap;
    private javax.swing.JTable tblNhanVien;
    private javax.swing.JTextField txtMaDH;
    private javax.swing.JTextField txtMaKH;
    private javax.swing.JTextField txtNgayTao;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtSearchDC;
    private javax.swing.JTextField txtSearchGT;
    private javax.swing.JTextField txtSearchNV;
    private javax.swing.JTextField txtTienNhan;
    private javax.swing.JTextField txtTienThua;
    private javax.swing.JTextField txtTongTien;
    // End of variables declaration//GEN-END:variables

    private int rowDH = -1;
    private int rowGT = -1;

    private static final String luuBienTemp = "saved_values.txt";
    private static double tempGT = 0;
    private static double tempTPT = 0;
    private static double tempDC = 0;

    DonHangDAO dhdao = new DonHangDAO();
    GoiTapDAO gtdao = new GoiTapDAO();
    DungCuDAO dcdao = new DungCuDAO();
    NhanVienDAO nvdao = new NhanVienDAO();
    KhachHangDAO khdao = new KhachHangDAO();
    ChiTietGoiTapDAO ctgtdao = new ChiTietGoiTapDAO();
    ChiTietDungCuDAO ctdcdao = new ChiTietDungCuDAO();
    ChiTietThuePTDAO cttptdao = new ChiTietThuePTDAO();
    ThongKeDAO_Procedure tkdao = new ThongKeDAO_Procedure();

    private void init() {
        this.fillTableDH();
        this.fillTableGT();
        this.fillTableDC();
        this.fillTableNhanVien();

        this.rowDH = -1;
        this.updateStatus();

    }

    public void updateData() {
        fillTableNhanVien();
        fillTableGT();
        fillTableDC();
        loadSavedValues();
    }

    private static void loadSavedValues() {
        try ( BufferedReader br = new BufferedReader(new FileReader(luuBienTemp))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] parts = line.split(":");
                if (parts.length == 2) {
                    if (parts[0].equals("tempGT")) {
                        tempGT = Double.parseDouble(parts[1]);
                    } else if (parts[0].equals("tempTPT")) {
                        tempTPT = Double.parseDouble(parts[1]);
                    } else if (parts[0].equals("tempDC")) {
                        tempDC = Double.parseDouble(parts[1]);
                    }
                }
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
        }
    }

    private static void saveValues() {
        try ( BufferedWriter bw = new BufferedWriter(new FileWriter(luuBienTemp))) {
            bw.write("tempGT:" + tempGT + "\n");
            bw.write("tempTPT:" + tempTPT + "\n");
            bw.write("tempDC:" + tempDC + "\n");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    void tinhTien() {
        try {
            double tienNhan = Double.parseDouble(txtTienNhan.getText());
            double tongTien = Double.parseDouble(txtTongTien.getText());
            txtTienThua.setText(String.valueOf(tienNhan - tongTien));
        } catch (Exception e) {

        }
    }

    void updateDH() {
        DonHang dh = getForm();
        try {
            dhdao.update(dh);
            fillTableDH();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Lưu thất bại");
        }
    }

    void thanhToan() {
        if (Double.parseDouble(txtTienNhan.getText()) < 0) {
            MsgBox.alert(this, "Tiền nhận không được là số âm!");
        } else if (Double.parseDouble(txtTienNhan.getText()) == 0) {
            MsgBox.alert(this, "Chưa nhập tiền nhận!");
        } else {
            if (Double.parseDouble(txtTienThua.getText()) < 0) {
                int choice = JOptionPane.showConfirmDialog(this, "Đơn này vẫn còn nợ tiền, bạn muốn tiếp tục ?", "Hệ thống quản lý phòng gym", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    rdoDaThanhToan.setSelected(true);
                    updateDH();
                    MsgBox.alert(this, "Thanh toán thành công!");
                }
            } else {
                rdoDaThanhToan.setSelected(true);
                updateDH();
                MsgBox.alert(this, "Thanh toán thành công!");
            }
        }
    }

    private int selectDH = -1;

    void fillTableDH() {
        selectDH = tblDonHang.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblDonHang.getModel();
        model.setRowCount(0);
        try {
            String keyword = txtSearch.getText();
            List<DonHang> list = dhdao.selectByKeyword(keyword); //đọc dữ liệu từ CSDL
            for (DonHang dh : list) {
                Object[] row = {dh.getMadh(), dh.getManv(), dh.getMakh(), XDate.toString(dh.getNgayTao(), "dd-MM-yyyy HH:mm:ss"),
                    dh.isTrangThai() ? "Đã thanh toán" : "Chờ", dh.getTongTien(),
                    dh.getTienNhan(), dh.getTienThua()};
                model.addRow(row); //thêm từng hàng vào JTable
            }
            if (selectDH != -1) {
                tblDonHang.setRowSelectionInterval(selectDH, selectDH);
            }

        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }

    DonHang getForm() {
        DonHang dh = new DonHang();
        dh.setMadh(Integer.parseInt(txtMaDH.getText()));
        dh.setManv(Auth.user.getMaNV());
        dh.setMakh(txtMaKH.getText());
        dh.setNgayTao(XDate.toDate(txtNgayTao.getText(), "dd-MM-yyyy HH:mm:ss"));
        dh.setTrangThai(rdoDaThanhToan.isSelected());
        dh.setTongTien(Double.parseDouble(txtTongTien.getText()));
        dh.setTienNhan(Double.parseDouble(txtTienNhan.getText()));
        dh.setTienThua(Double.parseDouble(txtTienThua.getText()));
        return dh;
    }

    void setForm(DonHang dh) {
        txtMaDH.setText(String.valueOf(dh.getMadh()));
        txtMaKH.setText(dh.getMakh());
        txtNgayTao.setText(XDate.toString(dh.getNgayTao(), "dd-MM-yyyy HH:mm:ss"));
        rdoCho.setSelected(!dh.isTrangThai());
        rdoDaThanhToan.setSelected(dh.isTrangThai());
        txtTongTien.setText(String.valueOf(dh.getTongTien()));
        txtTienNhan.setText(String.valueOf(dh.getTienNhan()));
        txtTienThua.setText(String.valueOf(dh.getTienThua()));
    }

    void updateStatus() {
        boolean edit = (this.rowDH >= 0);
        boolean editGT = (tblChiTietGoiTap.getSelectedRow() >= 0);
        boolean first = (this.rowDH == 0);
        boolean last = (this.rowDH == tblDonHang.getRowCount() - 1);

        //Trạng thái form
        txtNgayTao.setEditable(!edit);
        btnDoi.setEnabled(edit);
        btnXoa.setEnabled(edit);
//        btnXuatHoaDon.setEnabled(edit);
        if (this.rowDH >= 0 && tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 4).equals("Đã thanh toán")) {
            btnXuatHoaDon.setEnabled(true);
        } else {
            btnXuatHoaDon.setEnabled(false);
        }
        btnHuyDon.setEnabled(edit);

        //Trạng thái điều hướng
        btnFirst.setEnabled(edit && !first);
        btnPrev.setEnabled(edit);
        btnNext.setEnabled(edit);
        btnLast.setEnabled(edit && !last);
    }

    void clearForm() {
        DonHang dh = new DonHang();
        this.setForm(dh);
        this.rowDH = -1;
        fillTableNhanVien();
        tblGoiTap.clearSelection();
        tblDungCu.clearSelection();
        updateStatus();
    }

    void edit() {
        int madh = (int) tblDonHang.getValueAt(this.rowDH, 0);
        DonHang dh = dhdao.selectById(String.valueOf(madh));
//        ChiTietGoiTap ctgt = ctgtdao.selectByMaDH(String.valueOf(madh));
        this.setForm(dh);
//        this.setFormCTGT();
        this.updateStatus();
    }

    void createDH() {
        this.clearForm();
        rdoCho.setSelected(true);
        txtNgayTao.setText(XDate.toString(new Date(), "dd-MM-yyyy HH:mm:ss"));
        DonHang dh = getForm();
        dh.setNgayTao(XDate.toDate(txtNgayTao.getText(), "dd-MM-yyyy HH:mm:ss"));
        dh.setMakh("KH0");
        try {
            dhdao.createDH(dh);
            this.fillTableDH();
            tblDonHang.setRowSelectionInterval(tblDonHang.getRowCount() - 1, tblDonHang.getRowCount() - 1);
            int madh = (int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0);
            DonHang dhok = dhdao.selectById(String.valueOf(madh));
            this.setForm(dhok);
            this.updateStatus();
            MsgBox.alert(this, "Tạo đơn mới thành công!");
        } catch (Exception e) {
            MsgBox.alert(this, "Tạo đơn mới thất bại!");
            System.out.println(e);
        }

    }

    void delete() {
        String madh = txtMaDH.getText();
        if (!Auth.isManager()) {
            MsgBox.alert(this, "Bạn không có quyền được xóa!");
        } else {
            if (MsgBox.confirm(this, "Bạn có thực sự muốn xóa đơn hàng này ?")) {
                try {
                    dhdao.delete(madh);
                    tblDonHang.clearSelection();
                    this.fillTableDH();

                    //Reset row bảng CTGT
                    DefaultTableModel modelCTGT = (DefaultTableModel) tblChiTietGoiTap.getModel();
                    modelCTGT.setRowCount(0);
                    //Reset row bảng CTDC
                    DefaultTableModel modelCTDC = (DefaultTableModel) tblChiTietDungCu.getModel();
                    modelCTDC.setRowCount(0);
                    //Reset row bảng CTTPT
                    DefaultTableModel modelCTTPT = (DefaultTableModel) tblChiTietThuePT.getModel();
                    modelCTTPT.setRowCount(0);

                    this.clearForm();
                    MsgBox.alert(this, "Xóa đơn hàng thành công!");
                } catch (Exception e) {
                    MsgBox.alert(this, "Xóa đơn hàng thất bại");
                    System.out.println(e);
                }
            }
        }
    }

    void first() {
        this.rowDH = 0;
        tblDonHang.setRowSelectionInterval(rowDH, rowDH);
        this.edit();
        System.out.println(rowDH);
    }

    void next() {
        if (this.rowDH < tblDonHang.getRowCount() - 1) {
            this.rowDH++;
            this.edit();
            tblDonHang.setRowSelectionInterval(rowDH, rowDH);
        } else {
            this.rowDH = 0;
            this.edit();
            tblDonHang.setRowSelectionInterval(rowDH, rowDH);
        }
        System.out.println(rowDH);
    }

    void prev() {
        if (this.rowDH > 0) {
            this.rowDH--;
            this.edit();
            tblDonHang.setRowSelectionInterval(rowDH, rowDH);
        } else {
            this.rowDH = tblDonHang.getRowCount() - 1;
            this.edit();
            tblDonHang.setRowSelectionInterval(rowDH, rowDH);
        }
        System.out.println(rowDH);
    }

    void last() {
        this.rowDH = tblDonHang.getRowCount() - 1;
        this.edit();
        tblDonHang.setRowSelectionInterval(rowDH, rowDH);
        System.out.println(rowDH);
    }

    void timKiemDH() {
        this.fillTableDH();
        this.clearForm();
        this.rowDH = -1;
        updateStatus();
    }

    void doiKH() {
        DoiKHJDialog dialog = new DoiKHJDialog();
        dialog.setModal(true);  // để JPanel chờ đến khi JDialog đóng
        dialog.setVisible(true);
        // Khi JDialog đóng, lấy dữ liệu đã chọn
        String makh = dialog.getSelectedData();
        // Đặt dữ liệu vào txtMaKH
        txtMaKH.setText(makh);
        if (!txtMaKH.getText().isEmpty()) {
            updateDH();
        } else {
            MsgBox.alert(this, "Vui lòng chọn khách hàng!");
        }
    }

    //TAB MUA GÓI TẬP
    void fillTableGT() {
        DefaultTableModel model = (DefaultTableModel) tblGoiTap.getModel();
        model.setRowCount(0);
        try {
            String keyword = txtSearchGT.getText();
            List<GoiTap> list = gtdao.selectByKeyword(keyword); //đọc dữ liệu từ CSDL
            for (GoiTap gt : list) {
                Object[] row = {gt.getMaGT(), gt.getTenGoi(), gt.getGia(), gt.getThoiHan(),
                    gt.getMoTa()};
                model.addRow(row); //thêm từng hàng vào JTable
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }

    private int valueGT = 0;

    void themGT() {
        try {
            String get = JOptionPane.showInputDialog("Nhập vào số lượng: ");
            valueGT = Integer.parseInt(get);
            if (valueGT < 0) {
                MsgBox.alert(this, "Không được nhập vào số âm!");
                return;
            }
            createCTGT();
            tblGoiTap.clearSelection();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Vui lòng nhập vào một số!");
        }
        //lấy dữ liệu của từng ô làm get form. vd: tblGoiTap.getValueAt(0,0) để lấy mã gt. 0,1 để lấy tên gói...
        //tạo dao rồi thêm vào bảng chi tiết bình thường
    }

    void fillChiTietGoiTap() {
        DefaultTableModel model = (DefaultTableModel) tblChiTietGoiTap.getModel();
        model.setRowCount(0);
        try {
            int keyword = (int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0);
            List<ChiTietGoiTap> list = ctgtdao.selectByMaDH_CTGT(keyword); //đọc dữ liệu từ CSDL
            for (ChiTietGoiTap ctgt : list) {
                Object[] row = {ctgt.getMagt(), ctgt.getMadh(), ctgt.getSoluong(), XDate.toString(ctgt.getNgaydk(), "dd-MM-yyyy"),
                    XDate.toString(ctgt.getNgaykt(), "dd-MM-yyyy"), ctgt.getGia()};
                model.addRow(row); //thêm từng hàng vào JTable
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            System.out.println(e);
        }
    }

    void timKiemGT() {
        this.fillTableGT();
        this.clearForm();
        updateStatus();
    }
    
    void timKiemNV(){
        this.fillTableNhanVien();
        this.clearForm();
        updateStatus();
    }
    
    void timKiemDC(){
        this.fillTableDC();
        this.clearForm();
        updateStatus();
    }

    ChiTietGoiTap getFormSP_GT() {
        ChiTietGoiTap ctgt = new ChiTietGoiTap();
        ctgt.setMactgt(ABORT);
        ctgt.setMakh((String) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 2));
        ctgt.setMagt((String) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 0));
        ctgt.setMadh((int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0));
        ctgt.setNgaydk(new Date());
        ctgt.setNgaykt(XDate.addDay(new Date(), valueGT * (int) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 3)));

        Date currentDate = new Date();
        int selectedGoiTapDuration = (int) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 3);

        if (tblChiTietGoiTap.getRowCount() == 0) {
            ctgt.setNgaykt(XDate.addDay(currentDate, valueGT * selectedGoiTapDuration)); // Nếu không có dòng dữ liệu nào trong bảng, sử dụng ngày hiện tại
        } else {
            Date maxEndDate = null;
            for (int i = 0; i < tblChiTietGoiTap.getRowCount(); i++) {
                Date endDate = XDate.toDate((String) tblChiTietGoiTap.getValueAt(i, 4), "dd-MM-yyyy");
                if (maxEndDate == null || endDate.after(maxEndDate)) {
                    maxEndDate = endDate; // Tìm ngày kết thúc lớn nhất từ bảng
                }
            }

            if (maxEndDate != null && maxEndDate.after(currentDate)) {
                ctgt.setNgaykt(XDate.addDay(maxEndDate, valueGT * selectedGoiTapDuration)); // Sử dụng ngày kết thúc lớn nhất nếu nó lớn hơn ngày hiện tại
            } else {
                ctgt.setNgaykt(XDate.addDay(currentDate, valueGT * selectedGoiTapDuration)); // Nếu không có ngày kết thúc lớn hơn ngày hiện tại, sử dụng ngày hiện tại
            }
        }

        ctgt.setSoluong(valueGT);

        double gia = (double) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 2);
        ctgt.setGia(valueGT * gia);
        return ctgt;
    }

    void createCTGT() {
        tempGT = 0;
        double tongGT = 0;
        ChiTietGoiTap ctgt = getFormSP_GT();
        int thoiHan = (int) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 3) * valueGT;
        String magt = (String) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 0);
        double giaGoc = (double) tblGoiTap.getValueAt(tblGoiTap.getSelectedRow(), 2);
        double giaTang = valueGT * giaGoc;
        try {
            if (tblChiTietGoiTap.getRowCount() == 0) {
                ctgtdao.insert(ctgt);
                this.fillChiTietGoiTap();
            } else if (tblChiTietGoiTap.getRowCount() == 1) {
                boolean found = false;
                for (int i = 0; i < tblChiTietGoiTap.getRowCount(); i++) {
                    if (magt.equals(tblChiTietGoiTap.getValueAt(i, 0))) {
                        ctgtdao.updateDung(valueGT, thoiHan, magt, giaTang);
                        this.fillChiTietGoiTap();
                        found = true;
                        break; // Kết thúc vòng lặp khi tìm thấy mã gói tập khớp
                    }
                }
                if (!found) {
                    ctgtdao.insert(ctgt);
                    this.fillChiTietGoiTap();
                }
            } else if (tblChiTietGoiTap.getRowCount() > 1) {
                boolean found = false;
                for (int i = 0; i < tblChiTietGoiTap.getRowCount(); i++) {
                    if (magt.equals(tblChiTietGoiTap.getValueAt(i, 0))) {
                        ctgtdao.updateNgayKT(magt);
                        ctgtdao.updateDung(valueGT, thoiHan, magt, giaTang);
                        this.fillChiTietGoiTap();
                        found = true;
                        break; // Kết thúc vòng lặp khi tìm thấy mã gói tập khớp
                    }
                }
                if (!found) {
                    ctgtdao.insert(ctgt);
                    this.fillChiTietGoiTap();
                }
            }

            for (int i = 0; i < tblChiTietGoiTap.getRowCount(); i++) {
                tongGT = tongGT + (double) tblChiTietGoiTap.getValueAt(i, 5);
            }
            tempGT = tongGT;
            if (tblChiTietDungCu.getRowCount() == 0 && tblChiTietThuePT.getRowCount() == 0) {
                txtTongTien.setText(String.valueOf(tongGT));
            } else if (tblChiTietDungCu.getRowCount() != 0 && tblChiTietThuePT.getRowCount() == 0) {
                txtTongTien.setText(String.valueOf(tongGT + tempDC));
            } else if (tblChiTietDungCu.getRowCount() == 0 && tblChiTietThuePT.getRowCount() != 0) {
                txtTongTien.setText(String.valueOf(tongGT + tempTPT));
            } else if (tblChiTietDungCu.getRowCount() != 0 && tblChiTietThuePT.getRowCount() != 0) {
                txtTongTien.setText(String.valueOf(tongGT + tempTPT + tempDC));
            }
            updateDH();
            saveValues();
            MsgBox.alert(this, "Thêm sản phẩm vào đơn thành công!");
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Thêm sản phẩm vào đơn thất bại!");
        }
    }

    int thoiHanGT = 0;

    void xoaGT() {
        try {
            int clicked = tblChiTietGoiTap.getSelectedRow();
            String getSL = JOptionPane.showInputDialog("Nhập vào số lượng cần bớt: ");
            int sl = Integer.parseInt(getSL);
            String magt = (String) tblChiTietGoiTap.getValueAt(clicked, 0);
            double giaGoc = (double) tblChiTietGoiTap.getValueAt(clicked, 5) / (int) tblChiTietGoiTap.getValueAt(clicked, 2);
            double giaGiam = giaGoc * sl;
            List<GoiTap> list = gtdao.selectAll();

            for (GoiTap gt : list) {
                if (magt.equals(gt.getMaGT())) {
                    thoiHanGT = (int) gt.getThoiHan() * -1 * sl;
                }
            }

            if (sl > (int) tblChiTietGoiTap.getValueAt(clicked, 2)) {
                MsgBox.alert(this, "Bạn đã nhập số lượng lớn hơn số lượng hiện có!");
                return;
            } else if (sl < 0) {
                MsgBox.alert(this, "Không được nhập số lượng nhỏ hơn 0!");
                return;
            }

            ctgtdao.updateSoLuongGia(sl, thoiHanGT, magt, giaGiam);
            fillChiTietGoiTap();
            tblChiTietGoiTap.setRowSelectionInterval(clicked, clicked);

            // Cập nhật NgayKT của các đơn hàng có NgayKT lớn hơn NgayKT mới của GT1 sau khi giảm số lượng
            Date ngayKTMoi = XDate.toDate((String) tblChiTietGoiTap.getValueAt(tblChiTietGoiTap.getSelectedRow(), 4), "dd-MM-yyyy");
            System.out.println(XDate.toString(ngayKTMoi, "dd-MM-yyyy"));
            List<ChiTietGoiTap> listChiTiet = ctgtdao.selectAll();
            for (ChiTietGoiTap chiTiet : listChiTiet) {
                if (chiTiet.getNgaykt().after(ngayKTMoi)) {
                    ctgtdao.updateNgayKT_LonHon(chiTiet.getMagt(), thoiHanGT);
                }
            }
            this.fillChiTietGoiTap();

            double tongtien = Double.parseDouble(txtTongTien.getText());
            txtTongTien.setText(String.valueOf(tongtien - giaGiam));
            tempGT = Double.parseDouble(txtTongTien.getText());
            updateDH();
            for (int i = 0; i < tblChiTietGoiTap.getRowCount(); i++) {
                if ((int) tblChiTietGoiTap.getValueAt(i, 2) <= 0) {
                    ctgtdao.deleteMaGT(magt);
                    fillChiTietGoiTap();
                }
            }
            tblGoiTap.clearSelection();

//            saveValues();
            MsgBox.alert(this, "Cập nhật đơn hàng thành công!");
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Cập nhật đơn hàng thất bại!");
        }

    }

    //                                          TAB MUA DỤNG CỤ
    void fillTableDC() {
        DefaultTableModel model = (DefaultTableModel) tblDungCu.getModel();
        model.setRowCount(0);
        try {
            String keyword = txtSearchDC.getText();
            List<DungCu> list = dcdao.selectByKeyword(keyword); //đọc dữ liệu từ CSDL
            for (DungCu dc : list) {
                Object[] row = {dc.getMadc(), dc.getTendc(), dc.getGia(), dc.getMota(),
                    dc.getHinh()};
                model.addRow(row); //thêm từng hàng vào JTable
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            System.out.println(e);
        }

    }

    private int valueDC = 0;

    void themDC() {
        try {
            String get = JOptionPane.showInputDialog("Nhập vào số lượng: ");
            valueDC = Integer.parseInt(get);
            if (valueDC < 0) {
                MsgBox.alert(this, "Không được nhập vào số âm!");
                return;
            }
            createCTDC();
            tblDungCu.clearSelection();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Vui lòng nhập vào một số!");
        }
    }

    void fillChiTietDungCu() {
        DefaultTableModel model = (DefaultTableModel) tblChiTietDungCu.getModel();
        model.setRowCount(0);
        try {
            int keyword = (int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0);
            List<ChiTietDungCu> list = ctdcdao.selectByMaDH_CTDC(keyword); //đọc dữ liệu từ CSDL
            for (ChiTietDungCu ctdc : list) {
                Object[] row = {ctdc.getMadc(), ctdc.getMadh(), ctdc.getSl(), ctdc.getGia()};
                model.addRow(row); //thêm từng hàng vào JTable
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            System.out.println(e);
        }
    }

    ChiTietDungCu getFormSP_DC() {
        ChiTietDungCu ctdc = new ChiTietDungCu();
        ctdc.setMactdc(ABORT);
        ctdc.setMadc((String) tblDungCu.getValueAt(tblDungCu.getSelectedRow(), 0));
        ctdc.setMadh((int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0));
        ctdc.setMakh((String) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 2));
        ctdc.setSl(valueDC);
        double gia = (double) tblDungCu.getValueAt(tblDungCu.getSelectedRow(), 2);
        ctdc.setGia(valueDC * gia);
        return ctdc;
    }

    void createCTDC() {
        tempDC = 0;
        double tongDC = 0;
        ChiTietDungCu ctdc = getFormSP_DC();
        try {
            ctdcdao.insert(ctdc);
            this.fillChiTietDungCu();
            for (int i = 0; i < tblChiTietDungCu.getRowCount(); i++) {
                tongDC = tongDC + (double) tblChiTietDungCu.getValueAt(i, 3);
            }
            tempDC = tongDC;

            if (tblChiTietGoiTap.getRowCount() == 0 && tblChiTietThuePT.getRowCount() == 0) {
                txtTongTien.setText(String.valueOf(tongDC));
            } else if (tblChiTietGoiTap.getRowCount() != 0 && tblChiTietThuePT.getRowCount() == 0) {
                txtTongTien.setText(String.valueOf(tongDC + tempGT));
            } else if (tblChiTietGoiTap.getRowCount() == 0 && tblChiTietThuePT.getRowCount() != 0) {
                txtTongTien.setText(String.valueOf(tongDC + tempTPT));
            } else if (tblChiTietGoiTap.getRowCount() != 0 && tblChiTietThuePT.getRowCount() != 0) {
                txtTongTien.setText(String.valueOf(tongDC + tempTPT + tempGT));
            }

            updateDH();

            saveValues();

            MsgBox.alert(this, "Thêm sản phẩm vào đơn thành công!");
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Thêm sản phẩm vào đơn thất bại!");
        }
    }

    void xoaDC() {
        int clicked = tblChiTietDungCu.getSelectedRow();
        String madc = (String) tblChiTietDungCu.getValueAt(clicked, 0);
        double layGiaGoc = (double) tblChiTietDungCu.getValueAt(clicked, 3) / (int) tblChiTietDungCu.getValueAt(clicked, 2);
        String getSL = JOptionPane.showInputDialog("Nhập vào số lượng cần bớt: ");
        int sl = Integer.parseInt(getSL);
        double giaGiam = layGiaGoc * sl;
        try {
            if (sl > (int) tblChiTietDungCu.getValueAt(clicked, 2)) {
                MsgBox.alert(this, "Bạn đã nhập số lượng lớn hơn số lượng hiện có!");
                return;
            } else if (sl < 0) {
                MsgBox.alert(this, "Không được nhập số lượng nhỏ hơn 0!");
                return;
            }

            ctdcdao.updateSoLuongGia(sl, madc, giaGiam);
            fillChiTietDungCu();

            tblChiTietDungCu.setRowSelectionInterval(clicked, clicked);
            double tongtien = Double.parseDouble(txtTongTien.getText());
            txtTongTien.setText(String.valueOf(tongtien - giaGiam));
            tempDC = Double.parseDouble(txtTongTien.getText());
            updateDH();

            for (int i = 0; i < tblChiTietDungCu.getRowCount(); i++) {
                if ((int) tblChiTietDungCu.getValueAt(i, 2) <= 0) {
                    ctdcdao.deleteMaDC(madc);
                    fillChiTietDungCu();
                }
            }

            tblDungCu.clearSelection();

//            saveValues();
            MsgBox.alert(this, "Xóa sản phẩm thành công!");
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Xóa sản phẩm thất bại!");
        }

    }

    //                                          THUÊ HUẤN LUYỆN VIÊN
    public void fillTableNhanVien() {
        DefaultTableModel model = (DefaultTableModel) tblNhanVien.getModel();
        model.setRowCount(0);
        String keyword = txtSearchNV.getText();
        List<NhanVien> list = nvdao.selectByKeyword(keyword); //đọc dữ liệu từ CSDL
        for (NhanVien nv : list) {
            Object[] row = {nv.getMaNV(), nv.getHoten(), (double) 350000, (int) 1};
            model.addRow(row); //thêm từng hàng vào JTable
        }
    }

    private double tienBuoiTap = 0;
    private int valueTPT;

    public double tienBuoiTap() {
        return tienBuoiTap;
    }

    void thuePT() {
        try {
            String get = JOptionPane.showInputDialog("Nhập vào số buổi: ");
            valueTPT = Integer.parseInt(get);
            if (valueTPT < 0) {
                MsgBox.alert(this, "Không được nhập vào số âm!");
                return;
            }
            createCTTPT();
            tblNhanVien.clearSelection();
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Vui lòng nhập vào số buổi thuê!");
        }

    }

    void fillChiTietThuePT() {
        DefaultTableModel model = (DefaultTableModel) tblChiTietThuePT.getModel();
        model.setRowCount(0);
        try {
            int keyword = (int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0);
            List<ChiTietThuePT> list = cttptdao.selectByMaDH_CTTPT(keyword); //đọc dữ liệu từ CSDL
            for (ChiTietThuePT cttpt : list) {
                Object[] row = {cttpt.getManv(), cttpt.getMadh(), cttpt.getSobuoi(),
                    XDate.toString(cttpt.getNgaythue(), "dd-MM-yyyy"),
                    XDate.toString(cttpt.getNgaykt(), "dd-MM-yyyy"), cttpt.getGia()};
                model.addRow(row); //thêm từng hàng vào JTable
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            System.out.println(e);
        }
    }

    ChiTietThuePT getFormSP_TPT() {
        ChiTietThuePT cttpt = new ChiTietThuePT();

        cttpt.setMathue(ABORT);
        cttpt.setManv((String) tblNhanVien.getValueAt(tblNhanVien.getSelectedRow(), 0));
        cttpt.setMadh((int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0));
        cttpt.setMakh((String) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 2));
        cttpt.setSobuoi(valueTPT);
        cttpt.setNgaythue(new Date());
        cttpt.setNgaykt(XDate.addDay(new Date(), cttpt.getSobuoi()));

        Date currentDate = new Date();

        if (tblChiTietThuePT.getRowCount() == 0) {
            cttpt.setNgaykt(XDate.addDay(currentDate, valueTPT)); // Nếu không có dòng dữ liệu nào trong bảng, sử dụng ngày hiện tại
        } else {
            Date maxEndDate = null;
            for (int i = 0; i < tblChiTietThuePT.getRowCount(); i++) {
                Date endDate = XDate.toDate((String) tblChiTietThuePT.getValueAt(i, 4), "dd-MM-yyyy");
                if (maxEndDate == null || endDate.after(maxEndDate)) {
                    maxEndDate = endDate; // Tìm ngày kết thúc lớn nhất từ bảng
                }
            }

            if (maxEndDate != null && maxEndDate.after(currentDate)) {
                cttpt.setNgaykt(XDate.addDay(maxEndDate, valueTPT)); // Sử dụng ngày kết thúc lớn nhất nếu nó lớn hơn ngày hiện tại
            } else {
                cttpt.setNgaykt(XDate.addDay(currentDate, valueTPT)); // Nếu không có ngày kết thúc lớn hơn ngày hiện tại, sử dụng ngày hiện tại
            }
        }

        cttpt.setGia(350000 * valueTPT);
        return cttpt;

    }

    void createCTTPT() {
        tempTPT = 0;
        double tongTPT = 0;
        ChiTietThuePT cttpt = getFormSP_TPT();

        String manv = (String) tblNhanVien.getValueAt(tblNhanVien.getSelectedRow(), 0);

        try {
            if (tblChiTietThuePT.getRowCount() == 0) {
                cttptdao.insert(cttpt);
                this.fillChiTietThuePT();
            } else if (tblChiTietThuePT.getRowCount() == 1) {
                boolean found = false;
                for (int i = 0; i < tblChiTietThuePT.getRowCount(); i++) {
                    if (manv.equals(tblChiTietThuePT.getValueAt(i, 0))) {
                        cttptdao.updateDung(valueTPT, manv, valueTPT * (double) 350000);
                        this.fillChiTietThuePT();
                        found = true;
                        break; // Kết thúc vòng lặp khi tìm thấy mã nhân viên khớp
                    }
                }
                if (!found) {
                    cttptdao.insert(cttpt);
                    this.fillChiTietThuePT();
                }
            } else if (tblChiTietThuePT.getRowCount() > 1) {
                boolean found = false;
                for (int i = 0; i < tblChiTietThuePT.getRowCount(); i++) {
                    if (manv.equals(tblChiTietThuePT.getValueAt(i, 0))) {
                        cttptdao.updateNgayKT(manv);
                        cttptdao.updateDung(valueTPT, manv, valueTPT * (double) 350000);
                        this.fillChiTietThuePT();
                        found = true;
                        break; // Kết thúc vòng lặp khi tìm thấy mã gói tập khớp
                    }
                }
                if (!found) {
                    cttptdao.insert(cttpt);
                    this.fillChiTietThuePT();
                }
            }

            this.fillChiTietThuePT();
            for (int i = 0; i < tblChiTietThuePT.getRowCount(); i++) {
                tongTPT = tongTPT + (double) tblChiTietThuePT.getValueAt(i, 5);
            }
            tempTPT = tongTPT;

            if (tblChiTietGoiTap.getRowCount() == 0 && tblChiTietDungCu.getRowCount() == 0) {
                txtTongTien.setText(String.valueOf(tongTPT));
            } else if (tblChiTietGoiTap.getRowCount() != 0 && tblChiTietDungCu.getRowCount() == 0) {
                txtTongTien.setText(String.valueOf(tongTPT + tempGT));
            } else if (tblChiTietGoiTap.getRowCount() == 0 && tblChiTietDungCu.getRowCount() != 0) {
                txtTongTien.setText(String.valueOf(tongTPT + tempDC));
            } else if (tblChiTietGoiTap.getRowCount() != 0 && tblChiTietDungCu.getRowCount() != 0) {
                txtTongTien.setText(String.valueOf(tongTPT + tempGT + tempDC));
            }

            updateDH();
            saveValues();
            MsgBox.alert(this, "Thêm sản phẩm vào đơn thành công!");
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Thêm sản phẩm vào đơn thất bại!");
        }
    }

    int soBuoiGiam = 0;

    void xoaTPT() {
        try {
            int clicked = tblChiTietThuePT.getSelectedRow();
            String manv = (String) tblChiTietThuePT.getValueAt(clicked, 0);
            double layGia = (double) tblChiTietThuePT.getValueAt(clicked, 5);
            String getSL = JOptionPane.showInputDialog("Nhập vào số lượng cần bớt: ");
            int sl = Integer.parseInt(getSL);
            double giaGiam = (double) 350000 * sl;

            List<NhanVien> list = nvdao.selectAll();

            for (NhanVien nv : list) {
                if (manv.equals(nv.getMaNV())) {
                    soBuoiGiam = -1 * sl;
                }
            }

            if (sl > (int) tblChiTietThuePT.getValueAt(clicked, 2)) {
                MsgBox.alert(this, "Bạn đã nhập số lượng lớn hơn số lượng hiện có!");
                return;
            } else if (sl < 0) {
                MsgBox.alert(this, "Không được nhập số lượng nhỏ hơn 0!");
                return;
            }

            cttptdao.updateSoLuongGia(sl, soBuoiGiam, manv, giaGiam);
            fillChiTietThuePT();
            tblChiTietThuePT.setRowSelectionInterval(clicked, clicked);

            // Cập nhật NgayKT của các đơn hàng có NgayKT lớn hơn NgayKT mới của GT1 sau khi giảm số lượng
            Date ngayKTMoi = XDate.toDate((String) tblChiTietThuePT.getValueAt(clicked, 4), "dd-MM-yyyy");
            List<ChiTietThuePT> listChiTiet = cttptdao.selectAll();
            for (ChiTietThuePT chiTiet : listChiTiet) {
                if (chiTiet.getNgaykt().after(ngayKTMoi)) {
                    cttptdao.updateNgayKT_LonHon(chiTiet.getManv(), soBuoiGiam);
                }
            }
            this.fillChiTietThuePT();

            double tongtien = Double.parseDouble(txtTongTien.getText());
            txtTongTien.setText(String.valueOf(tongtien - giaGiam));
            tempTPT = Double.parseDouble(txtTongTien.getText());
            updateDH();
            for (int i = 0; i < tblChiTietThuePT.getRowCount(); i++) {
                if ((int) tblChiTietThuePT.getValueAt(i, 2) <= 0) {
                    cttptdao.deleteMaNV(manv);
                    fillChiTietThuePT();
                }
            }
            tblNhanVien.clearSelection();

//            saveValues();
            MsgBox.alert(this, "Cập nhật đơn hàng thành công!");
        } catch (Exception e) {
            System.out.println(e);
            MsgBox.alert(this, "Cập nhật đơn hàng thất bại!");
        }

    }

    void cancelDH() {
        int madh = (int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0);
        try {
            if (tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 4) == "Đã thanh toán") {
                MsgBox.alert(this, "Không thể hủy đơn đã thanh toán!");
            } else {
                int choice = JOptionPane.showConfirmDialog(this, "Bạn có chắc muốn hủy đơn này ?", "Hệ thống quản lý phòng Gym", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.NO_OPTION) {
                    return;
                }
                ctgtdao.deleteMaDH_CTGT(madh);
                fillChiTietGoiTap();
                cttptdao.deleteMaDH_CTTPT(madh);
                fillChiTietThuePT();
                ctdcdao.deleteMaDH_CTDC(madh);
                fillChiTietDungCu();
                txtTongTien.setText("0");
                updateDH();
                updateStatus();
                tblDonHang.clearSelection();
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    double sumHD = 0;
    double sumHD_SL = 0;

    void xuatHoaDon() {
        String path = "invoiceTest.pdf";
        try {
            //Lấy thông tin đơn hàng
            int madh = (int) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 0);
            String makh = (String) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 2);
            KhachHang kh = khdao.selectById(makh);
            String tenkh = kh.getTenKH();

            // Tạo một đối tượng PdfDocument với PdfWriter để ghi vào tệp PDF đích
            PdfWriter writer = new PdfWriter(path);
            PdfDocument pdf = new PdfDocument(writer);
            PdfFont font = PdfFontFactory.createFont("C:\\Users\\Duy Quang\\Documents\\NetBeansProjects\\Font\\arial-unicode-ms.ttf", PdfEncodings.IDENTITY_H, true);

            // Tạo kích thước trang mới
            PageSize pageSize = new PageSize(PageSize.A4);

            // Tạo một đối tượng Document với kích thước trang mới
            Document document = new Document(pdf, pageSize);

            // Tạo dòng đầu tiên và canh giữa với kích thước và font chữ tùy chỉnh
            Paragraph title = new Paragraph("Gym Software")
                    .setFontColor(com.itextpdf.kernel.colors.ColorConstants.BLACK)
                    .setFontSize(18)
                    .setBold()
                    .setFont(font)
                    .setTextAlignment(TextAlignment.CENTER);
            document.add(title);

            // Địa chỉ
            Paragraph diaChi = new Paragraph("Toà nhà FPT Polytechnic, Đ. Số 22, Thường Thạnh, Cái Răng, Cần Thơ")
                    .setFontColor(com.itextpdf.kernel.colors.ColorConstants.BLACK)
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.CENTER);
            document.add(diaChi);

            //Hotline
            Paragraph hotline = new Paragraph("Hotline: 0799607411")
                    .setFontColor(com.itextpdf.kernel.colors.ColorConstants.BLACK)
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.CENTER);
            document.add(hotline);

            // Hóa đơn thanh toán
            Paragraph hoaDon = new Paragraph("Hóa đơn thanh toán")
                    .setFontColor(com.itextpdf.kernel.colors.ColorConstants.BLACK)
                    .setFontSize(14)
                    .setFont(font)
                    .setBold()
                    .setTextAlignment(TextAlignment.CENTER);
            document.add(hoaDon);

            Table ngayTaoGioTao = new Table(2);

            //Ngày tạo và giờ tạo đơn
            Paragraph ngayTao = new Paragraph("Ngày tạo: " + XDate.toString(new Date(), "dd-MM-yyyy"))
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.LEFT);

            DonHang dh = getForm();
            Paragraph gioTao = new Paragraph("Giờ tạo: " + XDate.toString(dh.getNgayTao(), "HH:mm:ss"))
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.RIGHT);

            Cell left = new Cell().add(ngayTao).setTextAlignment(TextAlignment.LEFT).setBorder(Border.NO_BORDER).setPaddingLeft(0);
            Cell right = new Cell().add(gioTao).setTextAlignment(TextAlignment.RIGHT).setBorder(Border.NO_BORDER).setPaddingLeft(30);

            ngayTaoGioTao.addCell(left);
            ngayTaoGioTao.addCell(right);

            ngayTaoGioTao.setBorder(Border.NO_BORDER);

            document.add(ngayTaoGioTao);

            //Mã hóa đơn
            Paragraph maHoaDon = new Paragraph("Hóa đơn: " + madh)
                    .setFontSize(12)
                    .setFont(font) // Đặt vị trí cố định
                    .setTextAlignment(TextAlignment.LEFT);
            document.add(maHoaDon);

            // Khách hàng
            Paragraph customer = new Paragraph();
            customer.add("Khách hàng: " + tenkh)
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.LEFT);
            document.add(customer);

            //Bảng sản phẩm
            Table banHang = new Table(new float[]{3, 2, 2, 3});

            float tableWidth = PageSize.A4.getWidth() - document.getLeftMargin() - document.getRightMargin(); // Lấy chiều rộng của trang

            banHang.setWidth(tableWidth);

            Paragraph sanPham = new Paragraph("Sản phẩm")
                    .setFont(font)
                    .setBold()
                    .setFontSize(12)
                    .setTextAlignment(TextAlignment.CENTER);

            Paragraph soLuong = new Paragraph("Số lượng")
                    .setFont(font)
                    .setBold()
                    .setFontSize(12)
                    .setTextAlignment(TextAlignment.CENTER);

            Paragraph donGia = new Paragraph("Đơn giá")
                    .setFont(font)
                    .setBold()
                    .setFontSize(12)
                    .setTextAlignment(TextAlignment.CENTER);

            Paragraph thanhTien = new Paragraph("Thành tiền")
                    .setFont(font)
                    .setBold()
                    .setFontSize(12)
                    .setTextAlignment(TextAlignment.CENTER);

            DottedBorder dotted = new DottedBorder(1);

            Cell sp = new Cell().add(sanPham).setBorder(Border.NO_BORDER);
            sp.setBorderBottom(dotted);
            Cell sl = new Cell().add(soLuong).setBorder(Border.NO_BORDER);
            sl.setBorderBottom(dotted);
            Cell dg = new Cell().add(donGia).setBorder(Border.NO_BORDER);
            dg.setBorderBottom(dotted);
            Cell tt = new Cell().add(thanhTien).setBorder(Border.NO_BORDER);
            tt.setBorderBottom(dotted);

            banHang.addCell(sp);
            banHang.addCell(sl);
            banHang.addCell(dg);
            banHang.addCell(tt);

            DecimalFormat decimalFormat = new DecimalFormat("#,###");

            //ĐỔ DỮ LIỆU GÓI TẬP (NẾU CÓ)
            List<Object[]> listGT = tkdao.getInfoGoiTap(madh);
            for (Object[] infoGT : listGT) {
                String tenGoi = (String) infoGT[1];
                int slgt = (int) infoGT[2];
                double gia = (double) infoGT[3];
                double sumGT = (double) infoGT[4];

                // Định dạng giá tiền dưới dạng chuỗi tiền tệ
                String giaFormatted = decimalFormat.format(gia);
                String sumGTFormatted = decimalFormat.format(sumGT);

                // Tạo các đối tượng Paragraph chứa dữ liệu từ danh sách
                Paragraph tenGoiPara = new Paragraph(tenGoi).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph soLuongPara = new Paragraph(String.valueOf(slgt)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph giaPara = new Paragraph(String.valueOf(giaFormatted)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph thanhTienPara = new Paragraph(String.valueOf(sumGTFormatted)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);

                // Thêm các đối tượng Paragraph vào các ô của bảng banHang
                banHang.addCell(new Cell().add(tenGoiPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(soLuongPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(giaPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(thanhTienPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                sumHD = sumHD + sumGT;
                sumHD_SL = sumHD_SL + slgt;
            }

            //ĐỔ DỮ LIỆU THUÊ PT (NẾU CÓ)
            List<Object[]> listTPT = tkdao.getInfoThuePT(madh);
            for (Object[] infoTPT : listTPT) {
                String tenSp = (String) infoTPT[1];
                int sobuoi = (int) infoTPT[2];
                double giaTPT = (double) infoTPT[3];
                double sumTPT = (double) infoTPT[4];

                // Định dạng giá tiền dưới dạng chuỗi tiền tệ
                String giaTPTFormatted = decimalFormat.format(giaTPT);
                String sumTPTFormatted = decimalFormat.format(sumTPT);

                // Tạo các đối tượng Paragraph chứa dữ liệu từ danh sách
                Paragraph tenSpPara = new Paragraph(tenSp).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph soBuoiPara = new Paragraph(String.valueOf(sobuoi)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph giaTPTPara = new Paragraph(String.valueOf(giaTPTFormatted)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph sumTPTPara = new Paragraph(String.valueOf(sumTPTFormatted)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);

                // Thêm các đối tượng Paragraph vào các ô của bảng banHang
                banHang.addCell(new Cell().add(tenSpPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(soBuoiPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(giaTPTPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(sumTPTPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                sumHD = sumHD + sumTPT;
                sumHD_SL = sumHD_SL + sobuoi;
            }

            //ĐỔ DỮ LIỆU DỤNG CỤ (NẾU CÓ)
            List<Object[]> listDC = tkdao.getInfoDungCu(madh);
            for (Object[] infoDC : listDC) {
                String tendc = (String) infoDC[1];
                int soluong = (int) infoDC[2];
                double giadc = (double) infoDC[3];
                double sumdc = (double) infoDC[4];

                // Định dạng giá tiền dưới dạng chuỗi tiền tệ
                String giadcFormatted = decimalFormat.format(giadc);
                String sumdcFormatted = decimalFormat.format(sumdc);

                // Tạo các đối tượng Paragraph chứa dữ liệu từ danh sách
                Paragraph tenDCPara = new Paragraph(tendc).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph soLuongPara = new Paragraph(String.valueOf(soluong)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph giaDCPara = new Paragraph(String.valueOf(giadcFormatted)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);
                Paragraph sumDCPara = new Paragraph(String.valueOf(sumdcFormatted)).setFont(font).setFontSize(12).setTextAlignment(TextAlignment.CENTER);

                // Thêm các đối tượng Paragraph vào các ô của bảng banHang
                banHang.addCell(new Cell().add(tenDCPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(soLuongPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(giaDCPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                banHang.addCell(new Cell().add(sumDCPara).setBorder(Border.NO_BORDER).setBorderBottom(dotted));
                sumHD = sumHD + sumdc;
                sumHD_SL = sumHD_SL + soluong;
            }

            // TỔNG CỘNG
            if (banHang.getNumberOfRows() <= 1) {
                sumHD = 0;
                sumHD_SL = 0;
            }
            String totalTraFormatted = decimalFormat.format(sumHD);
            String totalSlFormatted = decimalFormat.format(sumHD_SL);

            Paragraph total = new Paragraph("Tổng cộng:").setFontSize(12).setFont(font).setTextAlignment(TextAlignment.LEFT);
            Paragraph blank = new Paragraph("").setFontSize(12).setFont(font).setTextAlignment(TextAlignment.CENTER);
            Paragraph totalSl = new Paragraph(totalSlFormatted).setFontSize(12).setFont(font).setTextAlignment(TextAlignment.CENTER);
            Paragraph totalTra = new Paragraph(totalTraFormatted).setFontSize(12).setFont(font).setTextAlignment(TextAlignment.CENTER);

            banHang.addCell(new Cell().add(total).setBorder(Border.NO_BORDER));
            banHang.addCell(new Cell().add(totalSl).setBorder(Border.NO_BORDER));
            banHang.addCell(new Cell().add(blank).setBorder(Border.NO_BORDER));
            banHang.addCell(new Cell().add(totalTra).setBorder(Border.NO_BORDER));

            document.add(banHang);

            //TIỀN NHẬN
            double nhan = (double) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 6);
            double thua = (double) tblDonHang.getValueAt(tblDonHang.getSelectedRow(), 7);
            String tienNhanFormatted = decimalFormat.format(nhan);
            String tienThuaFormatted = decimalFormat.format(thua);

            Paragraph tienNhan = new Paragraph().add("Tiền nhận: " + tienNhanFormatted)
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.LEFT);
            document.add(tienNhan);

            //TIỀN THỪA
            Paragraph tienThua = new Paragraph().add("Tiền đưa lại khách: " + tienThuaFormatted)
                    .setFontSize(12)
                    .setFont(font)
                    .setTextAlignment(TextAlignment.LEFT);
            document.add(tienThua);

            //CẢM ƠN
            BasicConfigurator.configure();
//            new float[]{3, 2, 2, 3}
            Table line = new Table(1);
            line.setWidth(tableWidth);

            line.addCell(new Cell().add(blank).setBorder(Border.NO_BORDER).setBorderBottom(dotted));

            document.add(line);

            document.add(new Paragraph("Xin cảm ơn và hẹn gặp lại quý khách!").setTextAlignment(TextAlignment.CENTER).setItalic().setFont(font).setFontSize(12).setBold());

            // Đóng tài liệu
            document.close();

            // Bỏ qua cảnh báo log4j
            System.out.println("Tạo file PDF thành công!");
        } catch (Exception e) {
            System.out.println(e);
        }

    }

}
